{"mappings":"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","sources":["src/js/createFilmsList.js","src/js/createFilmCard.js","src/js/fetchFilmModal.js","src/js/fetchdata.js","src/js/NewApiSearchFilms.js","src/js/NewApiPopularFilms.js","src/js/firebase.js"],"sourcesContent":["export default function createFilmsList(dates) {\n  const filmArray = dates[0].results;\n  const genreArray = dates[1].genres;\n  return filmArray\n    .map(\n      ({\n        original_title,\n        poster_path,\n        original_name,\n        genre_ids,\n        release_date,\n        id,\n      }) => {\n        return `<div class=\"film-card\">\n        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\"  alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"info\">\n          <p class=\"film-name\">${\n            original_title ? original_title : original_name\n          }\n          </p>\n          <p class=\"info-item\">\n            <b>${genreArray\n              .reduce((listGenre, genre) => {\n                if (genre_ids.includes(genre.id)) {\n                  listGenre.push(` ${genre.name}`);\n                }\n                return listGenre;\n              }, [])\n              .slice(0, 2)\n              .concat([' Other'])} </b >\n            <b>|</b>\n            <b>${release_date ? release_date.slice(0, 4) : '-'}</b>\n          </p>\n        </div>\n      </div>`;\n      }\n    )\n    .join('');\n}\n","export default function createFilmCard(movie) {\n  const {\n    vote_average,\n    vote_count,\n    genres,\n    original_title,\n    poster_path,\n    original_name,\n    popularity,\n    overview,\n    id,\n  } = movie;\n  console.log(genres);\n\n  return `<div class=\"about_film-card\">\n         <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" class=\"about_film-img\" alt=\"\" loading=\"lazy\" data-id=${id} />\n        <div class=\"about_film-info\">\n          <h1 class=\"about_film-name\">${\n            original_title ? original_title : original_name\n          }\n          </h1>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Vote / Votes</p>\n          <b class=\"about_film-date\">${vote_average} / ${vote_count}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Popularity</p>\n          <b class=\"about_film-date\">${popularity}</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Original Title</p>\n          <b class=\"about_film-date\">${\n            original_title ? original_title : original_name\n          }</b>\n          </div>\n          <div class=\"about_film-item\">\n          <p class=\"about_film-text\">Genre</p>\n          <b class=\"about_film-date\">${\n            genres ? genres.map(genre => genre.name) : ' '\n          }</b>\n          </div>\n          <h2 class=\"about_film-pretitle\">ABOUT</h2>\n          <p class=\"about_film-overview\">${overview}</p>\n        </div>\n      </div>`;\n}\n","export default async function fetchFilmModal(movie_id) {\n  const KEY_API = '024bf82d4805f650033dc69997860333';\n  const url = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${KEY_API}`;\n  console.log(url);\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n","import NewApiSearchFilms from './NewApiSearchFilms';\nimport NewApiPopularFilms from './NewApiPopularFilms';\nimport createFilmsList from './createFilmsList';\nimport createFilmCard from './createFilmCard';\nimport fetchFilmModal from './fetchFilmModal';\n\nconst newApiSearchFilm = new NewApiSearchFilms();\nconst newApiPopularFilms = new NewApiPopularFilms();\n\nconst filmsContainer = document.querySelector('.films__container');\nconst backdropEl = document.querySelector('.backdrop');\nconst modalFilmInfoEl = document.querySelector('.modal_film-info');\nconst btnModal = document.querySelector('.modal_film__button--close');\n\ndocument.addEventListener('DOMContentLoaded', startPopularFilms);\nfilmsContainer.addEventListener('click', onFilmClick);\nbtnModal.addEventListener('click', onBtnModalClick);\n\nasync function startPopularFilms() {\n  clearFilmsContainer();\n  newApiPopularFilms.resetPage();\n  try {\n    const dates = await newApiPopularFilms.fetchFilmsCards();\n    console.log(dates);\n    const markup = createFilmsList(dates);\n    filmsContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nfunction clearFilmsContainer() {\n  filmsContainer.innerHTML = '';\n}\n\nfunction onFilmClick(event) {\n  modalFilmInfoEl.innerHTML = '';\n  console.log(event.target);\n  console.log(event.currentTarget);\n  if (!event.target.dataset.id) {\n    return;\n  } else {\n    console.log(event.target.dataset.id);\n    fetchFilmModal(event.target.dataset.id)\n      .then(movie => {\n        console.log(movie);\n        if (!movie) {\n          return alert('The resource you requested could not be found.');\n        } else {\n          const markup = createFilmCard(movie);\n          backdropEl.classList.remove('is-hidden');\n          document.body.classList.toggle('modal-open');\n          modalFilmInfoEl.insertAdjacentHTML('beforeend', markup);\n        }\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nfunction onBtnModalClick() {\n  backdropEl.classList.add('is-hidden');\n  document.body.classList.toggle('modal-open');\n}\n","export default class NewApiSearchFilms {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  async searchFilm() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/search/movie?api_key=${KEY_API}&language=en-US&page=1&include_adult=false&query=${this.searchQuery}&page=${this.page}`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n","export default class NewApiPopularFilms {\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchFilmsCards() {\n    const KEY_API = '024bf82d4805f650033dc69997860333';\n    const festFetch = `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY_API}&page=1`;\n    const secondFetch = `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY_API}&language=en-US`;\n    const dateIds = [festFetch, secondFetch];\n\n    const arrayOfPromises = dateIds.map(async userId => {\n      const response = await fetch(`${userId}`);\n      return response.json();\n    });\n\n    const dates = await Promise.all(arrayOfPromises);\n    return dates;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n}\n","const URL = \"https://filmoteka-goit-6e05f-default-rtdb.firebaseio.com/\";\n\nexport class Firebase {\n    static create(data) {\n       return fetch(URL, {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-Type': 'aplicatiom/json'\n            }\n        })\n            .then(response => response.json())\n            .then(response => console.log(response))\n    }\n}\n\nconst URL_API = \"https://api.themoviedb.org/3/\"\n\n// /trending/{media_type}/{time_window}\nconst api_key=\"8c768371227c12dea02a7fda24385a83\"\n\nfunction fetchApi() {\n    return fetch(`${URL_API}trending/all/week?api_key=${api_key}`)\n    .then(response => response.json())\n    \n}\n\nfetchApi().then(response => console.log(response))"],"names":["$cb4a4b7c594db20f$export$2e2bcd8739ae039","dates","filmArray","results","genreArray","genres","map","original_title","poster_path","original_name","genre_ids","release_date","id","reduce","listGenre","genre","includes","push","name","slice","concat","join","$69097fbd8b311da8$export$2e2bcd8739ae039","movie","vote_average","vote_count","popularity","overview","console","log","async","$482241b9d50dd191$export$2e2bcd8739ae039","movie_id","url","response","fetch","json","KEY_API","arrayOfPromises","this","searchQuery","page","userId","Promise","all","query","newQuery","resetPage","incrementPage","constructor","$f75105a5f786686d$var$newApiPopularFilms","$f75105a5f786686d$var$filmsContainer","document","querySelector","$f75105a5f786686d$var$backdropEl","$f75105a5f786686d$var$modalFilmInfoEl","$f75105a5f786686d$var$btnModal","addEventListener","innerHTML","fetchFilmsCards","markup","insertAdjacentHTML","error","message","event","target","currentTarget","dataset","then","alert","classList","remove","body","toggle","catch","add"],"version":3,"file":"index.52fef2f3.js.map"}